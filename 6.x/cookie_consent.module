<?php
/**
 * Implements hook_menu().
 */
function cookie_consent_menu() {
  $items['admin/settings/cookie-consent'] = array(
    'title' => t('Cookie Consent Settings'),
    'description' => t('Configure Cookie Consent'),
    'access arguments' => array('administer cookie_consent'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cookie_consent_admin_form'),
    'file' => 'cookie_consent.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['cookie-consent/add'] = array(
    'title' => t('Add a Cookie Consent record'),
    'access arguments' => array('access content'),
    'page callback' => 'cookie_consent_add',
    'type' => MENU_CALLBACK,
  );

  $items['cookie-consent.js'] = array(
    'title' => t('Cookie Consent Script'),
    'access arguments' => array('access content'),
    'page callback' => 'cookie_consent_javascript_options',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function cookie_consent_javascript_options() {
  global $base_root;
  drupal_set_header('Content-Type: text/javascript; charset="utf-8"');
  $cookies = array_intersect_assoc(module_invoke_all('cookie_consent_categories'), _cookie_consent_get_patterns());

  // We cannot use Drupal.settings, because the cookie compliance
  // script must kick in before the Druapl.settings object is added to the page.
  $options = array(
    'style' => variable_get('cookie_consent_style', 'monochrome'),
    'ip' => $_SERVER['REMOTE_ADDR'],
    'cookies' => $cookies,
    'serveraddr' => $base_root,
    'bannerPosition' => variable_get('cookie_consent_banner_position', 'top'),
    'tagPosition' => variable_get('cookie_consent_tag_position', 'vertical-right'),
    'refreshOnConsent' => (bool) variable_get('cookie_consent_refresh_on_consent', 0),
    'privacy' => (bool) variable_get('cookie_consent_privacy', 0),
  );

  print 'var ccOptions = ' . drupal_to_js($options) . ';';
  exit;
}

/**
 * Implements hook_perm().
 */
function cookie_consent_perm() {
  return array('administer cookie_consent');
}

/**
 * Implementation of hook_theme_registry_alter().
 * Make the preprocess function the last one available.
 */
function cookie_consent_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page'])) {
    if (count($theme_registry['page']['preprocess functions']) > 0) {
      $key = array_search('cookie_consent_preprocess_page', $theme_registry['page']['preprocess functions']);
      if ($key) {
        unset($theme_registry['page']['preprocess functions'][$key]);
      }
    }
    $theme_registry['page']['preprocess functions'][] = 'cookie_consent_preprocess_page';
  }
}

/**
 * Implements hook_init().
 */
function cookie_consent_init() {
  global $user, $cookie_consent;

  if (!array_intersect(array_keys($user->roles), variable_get('cookie_consent_roles', array())) or
      (preg_match('/^admin/', $_GET['q']))) {
    // Cookie consent is configured to not show for this role.
    // Or we're dealing with an admin page.
    $cookie_consent = FALSE;
    return;
  }

  $cookie_consent = TRUE;
  $path = drupal_get_path('module', 'cookie_consent');
  drupal_add_css($path . '/css/cookie-consent.css');
  // Load the necessary files.
  drupal_add_js($path . '/js/plugin.js');
  drupal_add_js($path . '/js/cookie_consent.js');
}

/**
 * Implements hook_cookie_consent_categories().
 * You can implement your this hook in your own module to add additional categories.
 */
function cookie_consent_cookie_consent_categories() {
  $cookies['social'] = array(
    'title' => t('Social Media'),
    'description' => t('Facebook, Twitter and other social websites need to know who you are to work properly.'),
  );
  $cookies['advertising'] = array(
    'title' => t('Advertising'),
    'description' => t('Adverts will be chosen for you automatically based on your past behaviour and interests.'),
  );
  $cookies['necessary'] = array(
    'title' => t('Strictly necessary'),
    'description' => t('Some cookies on this website are strictly necessary and cannot be disabled.'),
  );
  $cookies['analytics'] = array(
    'title' => t('Analytics'),
    'description' => t('We anonymously measure your use of this website to improve your experience.'),
  );

  return $cookies;
}

/**
 * AJAX page callback to add a consent to the database
 * or to update an existing record.
 */
function cookie_consent_add() {
  if (!isset($_GET['type']) or !isset($_GET['value']) or !isset($_GET['ip'])) {
    return drupal_access_denied();
  }

  $cookies = module_invoke_all('cookie_consent_categories');
  $type = check_plain($_GET['type']);

  // Check if we have this type defined.
  if (!isset($cookies[str_replace('cc_', '', $type)])) {
    return drupal_access_denied();
  }

  $record = (object) array(
    'ip' => check_plain($_GET['ip']),
    'type' => $type,
    'value' => check_plain($_GET['value']),
    'changed' => time(),
  );

  $exists = db_fetch_object(db_query("SELECT ccid, created FROM {cookie_consent} WHERE type = '%s' AND ip = '%s'", $record->type,  $record->ip));

  $primary_key = NULL;

  if ($exists) {
    $record->ccid = $exists->ccid;
    $record->created = $exists->created;
    $primary_key = 'ccid';
  }
  else {
    $record->created = time();
  }

  drupal_write_record('cookie_consent', $record, $primary_key);
  print json_encode($record);
  exit;
}

/**
 * Implements hook_preprocess_page().
 */
function cookie_consent_preprocess_page(&$page) {
  global $cookie_consent;

  if (!$cookie_consent) {
    return;
  }

  $scripts = array(
    '<script type="text/javascript" src="/cookie-consent.js"></script>'
  );

  // Loop through all scripts.
  if (preg_match_all('/<script.+?<\/script>/si', $page['scripts'], $matches)) {
    foreach ($matches[0] as $script) {
      $new_script = FALSE;
      // Check if there is a match
      foreach (_cookie_consent_get_patterns() as $category => $patterns) {
        foreach ($patterns as $pattern) {
          if (preg_match('#' . preg_quote($pattern) . '#', $script)) {
            // Form the new script tag
            $new_script = preg_replace('/type=(["\'])text\/javascript(["\'])/', 'type=$1text/plain$2 class=$1cc-onconsent-' . $category . '$2', $script);
          }
        }
      }

      // Add the right script tag to the list of scripts.
      $scripts[] = $new_script ? $new_script : $script;
    }
  }

  $page['scripts'] = join(PHP_EOL, $scripts);
}

/**
 * API function to retrieve current patterns.
 */
function _cookie_consent_get_patterns() {
  static $build = NULL;

  if (!isset($build)) {
    $build = array();
    foreach (module_invoke_all('cookie_consent_categories') as $category => $info) {
      $multiline_string = variable_get('cookie_consent_' . $category, NULL);

      if ($multiline_string === null OR empty($multiline_string)) {
        continue;
      }

      $build[$category] = array_map('trim', explode("\n", $multiline_string));
    }
  }

  return $build;
}