<?php
/**
 * Implements hook_menu().
 */
function cookie_consent_menu() {
  $items['admin/config/cookie-consent'] = array(
    'title' => t('Cookie Consent Settings'),
    'description' => t('Configure Cookie Consent'),
    'access arguments' => array('administer cookie_consent'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cookie_consent_admin_form'),
    'file' => 'cookie_consent.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['cookie-consent/add'] = array(
    'title' => t('Add a Cookie Consent record'),
    'access arguments' => array('access content'),
    'page callback' => 'cookie_consent_add',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function cookie_consent_permission() {
  return array(
    'administer cookie_consent' => array(
      'title' => t('Administer Cookie Consent'),
      'description' => t('Perform administration tasks for the Cookie Consent module'),
     ),
  );
}

/**
 * Implements hook_init().
 */
function cookie_consent_init() {
  global $base_root, $user, $cookie_consent;

  $paths = path_get_admin_paths();
  $current_path = current_path();

  // If we're dealing with an admin page, don't show the cookie message.
  if (preg_match('/^admin/', $current_path) or drupal_match_path($current_path, $paths['admin'])
      or !array_intersect(array_keys($user->roles), variable_get('cookie_consent_roles', array()))) {
    $cookie_consent = FALSE;
    return;
  }

  $cookie_consent = TRUE;

  $cookies = array_intersect_assoc(module_invoke_all('cookie_consent_categories'), _cookie_consent_get_patterns());

  // We cannot use Drupal.settings, because the cookie compliance
  // script must kick in before the Druapl.settings object is added to the page.
  $options = array(
    'style' => variable_get('cookie_consent_style', 'monochrome'),
    'ip' => $_SERVER['REMOTE_ADDR'],
    'cookies' => $cookies,
    'serveraddr' => $base_root,
    'bannerPosition' => variable_get('cookie_consent_banner_position', 'top'),
    'privacy' => variable_get('cookie_consent_privacy', 0),
    'tagPosition' => variable_get('cookie_consent_tag_position', 'vertical-right'),
    'refreshOnConsent' => variable_get('cookie_consent_refresh_on_consent', 0),
  );

  drupal_add_js('var ccOptions = ' . drupal_json_encode($options) . ';', 'inline');

  // Load the necessary files.
  $path = drupal_get_path('module', 'cookie_consent');
  drupal_add_css($path . '/css/style.css');
  drupal_add_js($path . '/js/plugin.js');
  drupal_add_js($path . '/js/cookie_consent.js');
}

/**
 * Implements hook_cookie_consent_categories().
 * You can implement your this hook in your own module to add additional categories.
 */
function cookie_consent_cookie_consent_categories() {
  $cookies['social'] = array(
    'title' => t('Social Media'),
    'description' => t('Facebook, Twitter and other social websites need to know who you are to work properly.'),
  );
  $cookies['advertising'] = array(
    'title' => t('Advertising'),
    'description' => t('Adverts will be chosen for you automatically based on your past behaviour and interests.'),
  );
  $cookies['necessary'] = array(
    'title' => t('Strictly necessary'),
    'description' => t('Some cookies on this website are strictly necessary and cannot be disabled.'),
  );
  $cookies['analytics'] = array(
    'title' => t('Analytics'),
    'description' => t('We anonymously measure your use of this website to improve your experience.'),
  );

  return $cookies;
}

/**
 * AJAX page callback to add a consent to the database
 * or to update an existing record.
 */
function cookie_consent_add() {
  if (!isset($_GET['type']) or !isset($_GET['value']) or !isset($_GET['ip'])) {
    return drupal_access_denied();
  }

  $cookies = module_invoke_all('cookie_consent_categories');
  $type = check_plain($_GET['type']);

  // Check if we have this type defined.
  if (!isset($cookies[str_replace('cc_', '', $type)])) {
    return drupal_access_denied();
  }

  $record = (object) array(
    'ip' => check_plain($_GET['ip']),
    'type' => $type,
    'value' => check_plain($_GET['value']),
    'changed' => time(),
  );

  $exists = db_select('cookie_consent', 'cc')
      ->fields('cc', array('ccid', 'created'))
      ->condition('type', $record->type)
      ->condition('ip', $record->ip)
      ->execute()
      ->fetch();

  $primary_key = NULL;

  if ($exists) {
    $record->ccid = $exists->ccid;
    $record->created = $exists->created;
    $primary_key = 'ccid';
  }
  else {
    $record->created = time();
  }

  drupal_write_record('cookie_consent', $record, $primary_key);
  drupal_json_output($record);
  exit;
}

/**
 * Implements hook_process_html_tag().
 * Does the magic of converting the right script files (added as a regex on the admin page)
 * to to text/plain and adding the necessary class for cookie consent to selectively
 * enable or disable pieces of javascript.
 */
function cookie_consent_process_html_tag(&$vars) {
  global $cookie_consent;
  if ($cookie_consent and isset($vars['element']['#tag']) and $vars['element']['#tag'] === 'script') {
    foreach (_cookie_consent_get_patterns() as $category => $patterns) {
      foreach ($patterns as $pattern) {
        $pattern = '#' . preg_quote($pattern) . '#';

        $subject = !empty($vars['element']['#attributes']['src']) ? $vars['element']['#attributes']['src'] : '';
        if (!empty($vars['element']['#value'])) {
          $subject .= ' ' . $vars['element']['#value'];
        }

        if (preg_match($pattern, $subject)) {
          $vars['element']['#attributes']['type'] = 'text/plain';
          $vars['element']['#attributes']['class'] = array('cc-onconsent-' . $category);
        }
      }
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function cookie_consent_page_alter(&$page) {
  global $cookie_consent;
  if ($cookie_consent and variable_get('cookie_consent_filter_iframe', FALSE)) {
    $page['#post_render'][] = 'cookie_consent_alter_iframe';
  }
}

/**
 * This function strips out all <iframe> tags matching the regexes,
 * and replaces them with a variant that will only be loaded
 * when consent has been given.
 */
function cookie_consent_alter_iframe($html, $page) {
  if (preg_match_all('/<iframe.+?<\/iframe>/si', $html, $matches)) {
    $iframe_count = 0;

    foreach ($matches[0] as $iframe) {
      foreach (_cookie_consent_get_patterns() as $category => $patterns) {
        foreach ($patterns as $pattern) {
          if (preg_match('#' . preg_quote($pattern) . '#', $iframe)) {
            $iframe_count++;

            $jquery = 'jQuery("#iframe-' . $iframe_count . '").html("' . addslashes($iframe) . '")';
            $script = '<script type="text/plain" class="cc-onconsent-' . $category . '">'.$jquery.'</script><span id="iframe-' . $iframe_count . '"></span>';

            $html = str_replace($iframe, $script, $html);
          }
        }
      }
    }
  }

  return $html;
}

/**
 * API function to retrieve current patterns.
 */
function _cookie_consent_get_patterns() {
  $build = &drupal_static(__FUNCTION__);

  if (!isset($build)) {
    $build = array();
    foreach (module_invoke_all('cookie_consent_categories') as $category => $info) {
      $multiline_string = variable_get('cookie_consent_' . $category, NULL);

      if ($multiline_string === null OR empty($multiline_string)) {
        continue;
      }

      $build[$category] = array_map('trim', explode("\n", $multiline_string));
    }
  }

  return $build;
}